# Docker Compose 开发环境配置
# 支持代码热重载和实时调试
version: '3.8'

services:
  # 后端API服务 (开发模式)
  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: dataquery-backend-dev
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=development
    volumes:
      # 挂载整个API代码目录以支持热重载
      - ./api:/app
      # 排除不需要挂载的目录
      - /app/__pycache__
      - /app/.pytest_cache
    networks:
      - dataquery-network
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 前端服务 (开发模式)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    container_name: dataquery-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    volumes:
      # 挂载前端代码目录以支持热重载
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      # 排除node_modules
      - /app/node_modules
    networks:
      - dataquery-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

networks:
  dataquery-network:
    driver: bridge
