# DuckQuery 项目约束规则

## 🎯 核心开发原则

### 1. 技术方案优先原则
- **先分析后实现**: 修改代码前必须先做技术方案分析
- **全局视角**: 不要局限于当前文件，要基于整个项目架构分析
- **影响评估**: 分析修改对现有功能的影响范围
- **依赖关系**: 梳理相关组件、接口、数据流的依赖关系
- **风险评估**: 评估修改可能带来的风险和副作用

### 2. 代码质量约束
- **禁止硬编码**: 所有配置、常量、路径必须可配置化
- **避免重复**: 不重复定义功能相似的接口或组件
- **保持一致性**: 与现有代码风格、命名规范保持一致
- **最小化修改**: 优先复用现有代码，避免大规模重构
- **代码可读性**: 变量命名语义化，注释清晰完整

### 3. 接口设计约束
- **统一接口**: 相同功能使用统一接口，避免多套API
- **向后兼容**: 新增功能不破坏现有接口
- **职责清晰**: 每个接口职责单一，避免功能混杂
- **命名规范**: 接口命名要语义化，体现功能用途
- **参数验证**: 所有接口参数必须进行有效性验证

### 4. 实现方式约束
- **充分思考**: 考虑多种实现方案，选择最优解
- **性能考虑**: 大数据量操作要考虑内存和性能影响
- **错误处理**: 完善的错误处理和用户友好的错误提示
- **异步处理**: 长时间运行的操作必须异步化
- **资源管理**: 合理管理数据库连接、文件句柄等资源

## 🚫 严格禁止的行为
- **禁止硬编码任何配置信息**
- **禁止重复定义功能相同的接口**
- **禁止未经分析就修改代码**
- **禁止破坏现有功能的兼容性**
- **禁止忽略错误处理和异常情况**
- **禁止在代码中留下调试信息**
- **禁止提交未测试的代码**
- **禁止忽略性能和安全考虑**

## ✅ 必须遵循的流程
1. **需求分析** → 2. **技术方案** → 3. **代码实现** → 4. **功能测试** → 5. **代码审查** → 6. **部署验证**

## 📁 项目结构参考
- 前端入口: [frontend/src/ShadcnApp.jsx](mdc:frontend/src/ShadcnApp.jsx)
- 后端入口: [api/main.py](mdc:api/main.py)
- 异步任务: [api/routers/async_tasks.py](mdc:api/routers/async_tasks.py)
- 查询接口: [api/routers/query.py](mdc:api/routers/query.py)
- 数据模型: [api/models/visual_query_models.py](mdc:api/models/visual_query_models.py)