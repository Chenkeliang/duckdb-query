# 当前项目状态约束规则

## 🎯 项目当前状态

### 1. 已完成的统一化工作
- ✅ **API端点统一**: 前端统一使用 `/api/duckdb/tables` 相关端点
- ✅ **缓存管理统一**: 统一通过 `requestManager` 进行缓存管理
- ✅ **数据源刷新统一**: 异步任务完成后自动刷新所有相关页面
- ✅ **异步任务统一**: 统一使用 `/api/async_query` 端点和连接池管理
- ✅ **错误处理统一**: 统一的错误处理和用户友好提示

### 2. 当前架构模式
- **前端**: React + Vite + MUI (Material-UI v5) + 自定义CSS (Shadcn/ui风格) + Lucide React
- **后端**: FastAPI + DuckDB + 连接池管理
- **异步任务**: 基于连接池的非阻塞任务执行
- **缓存策略**: 统一的请求管理和防抖机制
- **数据刷新**: 全局统一的数据源刷新机制

### 3. 核心组件状态
- **主应用**: `ShadcnApp.jsx` - 统一的数据管理和刷新机制
- **异步任务**: `AsyncTaskList.jsx` - 支持任务完成自动刷新
- **数据展示**: `ModernDataDisplay.jsx` - 支持异步任务提交
- **查询构建器**: `QueryBuilder.jsx` - 统一的数据源获取
- **API客户端**: `apiClient.js` - 统一的API调用和缓存管理

## 🚫 当前禁止的修改
- **禁止回退** 到旧的API端点使用方式
- **禁止绕过** 统一的缓存管理机制
- **禁止使用** 全局单例DuckDB连接
- **禁止忽略** 异步任务完成后的数据刷新
- **禁止混用** 不同的API调用方式

## ✅ 当前必须遵循的规范
- **统一使用** `getDuckDBTablesEnhanced()` 获取表列表
- **统一使用** `deleteDuckDBTableEnhanced()` 删除表
- **统一使用** `requestManager.clearAllCache()` 清理缓存
- **统一使用** `triggerRefresh()` 触发数据刷新
- **统一使用** `DuckDBConnectionPool` 管理数据库连接

## 📁 关键文件状态
- 主应用: [frontend/src/ShadcnApp.jsx](mdc:frontend/src/ShadcnApp.jsx) - ✅ 已统一
- API客户端: [frontend/src/services/apiClient.js](mdc:frontend/src/services/apiClient.js) - ✅ 已统一
- 请求管理器: [frontend/src/utils/requestManager.js](mdc:frontend/src/utils/requestManager.js) - ✅ 已统一
- 异步任务: [api/routers/async_tasks.py](mdc:api/routers/async_tasks.py) - ✅ 已统一
- 连接池: [api/core/duckdb_pool.py](mdc:api/core/duckdb_pool.py) - ✅ 已统一