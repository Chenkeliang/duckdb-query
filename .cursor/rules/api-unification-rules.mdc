# API统一化约束规则

## 🎯 API统一原则

### 1. 端点统一约束
- **DuckDB表操作**: 统一使用 `/api/duckdb/tables` 端点
- **删除表操作**: 统一使用 `/api/duckdb/tables/{table_name}` 端点
- **禁止混用**: 不允许同时使用 `/api/duckdb_tables` 和 `/api/duckdb/tables`
- **向后兼容**: 保留旧端点但标记为废弃，新功能必须使用新端点

### 2. 前端API调用统一
- **获取表列表**: 统一使用 `getDuckDBTablesEnhanced()`
- **删除表**: 统一使用 `deleteDuckDBTableEnhanced()`
- **缓存管理**: 统一通过 `requestManager` 进行缓存管理
- **错误处理**: 统一的错误处理和重试机制

### 3. 数据源刷新统一
- **触发机制**: 异步任务完成后统一调用 `triggerRefresh()`
- **缓存清理**: 统一调用 `requestManager.clearAllCache()`
- **全局刷新**: 所有页面（图形化查询、数据表管理、SQL执行器等）同步刷新
- **防抖机制**: 统一的防抖策略避免重复请求

## 🚫 严格禁止的API使用
- **禁止使用** `getDuckDBTables()` (旧版本)
- **禁止使用** `deleteDuckDBTable()` (旧版本)
- **禁止直接调用** `/api/duckdb_tables` 端点
- **禁止绕过** `requestManager` 的缓存管理
- **禁止混用** 不同的API调用方式

## ✅ 必须遵循的API规范
- **统一使用** `getDuckDBTablesEnhanced()` 获取表列表
- **统一使用** `deleteDuckDBTableEnhanced()` 删除表
- **统一使用** `requestManager.clearAllCache()` 清理缓存
- **统一使用** `triggerRefresh()` 触发数据刷新
- **统一使用** `/api/duckdb/tables` 相关端点

## 📁 相关文件参考
- API客户端: [frontend/src/services/apiClient.js](mdc:frontend/src/services/apiClient.js)
- 请求管理器: [frontend/src/utils/requestManager.js](mdc:frontend/src/utils/requestManager.js)
- 主应用: [frontend/src/ShadcnApp.jsx](mdc:frontend/src/ShadcnApp.jsx)
- DuckDB查询: [api/routers/duckdb_query.py](mdc:api/routers/duckdb_query.py)