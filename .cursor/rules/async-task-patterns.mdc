# 异步任务模式约束规则

## 🎯 异步任务统一模式

### 1. 任务创建统一
- **统一接口**: 所有异步任务都使用 `/api/async_query` 端点
- **请求模型**: 统一使用 `AsyncQueryRequest` 模型
- **任务类型**: 支持 `task_type` 字段区分任务类型（query、save_to_table、export等）
- **自定义表名**: 支持 `custom_table_name` 字段用于用户自定义表名

### 2. 任务执行统一
- **连接池管理**: 统一使用 `DuckDBConnectionPool` 避免阻塞
- **状态跟踪**: 实时更新任务状态（pending、running、completed、failed）
- **进度反馈**: 长时间任务提供进度反馈
- **错误处理**: 完善的错误处理和重试机制

### 3. 任务完成处理
- **自动刷新**: 任务完成后自动触发数据源列表刷新
- **状态检测**: 通过比较任务状态变化检测完成事件
- **回调机制**: 使用 `onTaskCompleted` 回调通知父组件
- **缓存清理**: 自动清理相关缓存确保数据一致性

## 🚫 严格禁止的异步任务模式
- **禁止使用** 全局单例DuckDB连接（会导致阻塞）
- **禁止使用** 旧的 `/api/async-tasks/create` 端点
- **禁止忽略** 任务完成后的数据源刷新
- **禁止硬编码** 任务ID或表名生成规则
- **禁止绕过** 连接池管理机制

## ✅ 必须遵循的异步任务规范
- **统一使用** `/api/async_query` 端点创建任务
- **统一使用** `DuckDBConnectionPool` 管理连接
- **统一使用** `onTaskCompleted` 回调处理完成事件
- **统一使用** `triggerRefresh()` 刷新数据源
- **统一使用** `requestManager.clearAllCache()` 清理缓存

## 📁 相关文件参考
- 异步任务路由: [api/routers/async_tasks.py](mdc:api/routers/async_tasks.py)
- 连接池管理: [api/core/duckdb_pool.py](mdc:api/core/duckdb_pool.py)
- 异步任务列表: [frontend/src/components/AsyncTasks/AsyncTaskList.jsx](mdc:frontend/src/components/AsyncTasks/AsyncTaskList.jsx)
- 数据展示组件: [frontend/src/components/Results/ModernDataDisplay.jsx](mdc:frontend/src/components/Results/ModernDataDisplay.jsx)